#!/usr/bin/env python3

"""
Randomly sample files from the Mullvad WireGuard configuration generator.

Mullvad offer a bewildering array of servers.  It is usually not practical to
load configuration for all servers into any one device.  This program samples a
small random subset from the large upstream superset.  Sampler behaviour may be
tailored to suit individual requirements.  Output from this program is intended
to be imported en masse into the WireGuard clients for Android, iOS, and macOS.

Navigate to the Mullvad WireGuard configuration file generator:

https://mullvad.net/en/account/wireguard-config

Plug in your Mullvad WireGuard private key.  Select 'All countries'.  Click the
'Download zip archive' button.  Unpack the archive somewhere on your filesystem;
this directory must be specified as the src-dir argument to this script.

The following constraints apply to the WireGuard application for Android:

  * No more than 15 tunnel configurations may be loaded at a time.
    (avoid large values for -n)
  * Configuration file names are subject to a length limit.
    https://lists.zx2c4.com/pipermail/wireguard/2019-December/004772.html
    (avoid --rename)

Requires Python 3.7 or later.
"""

# pylint: disable=consider-using-f-string
# pylint: disable=invalid-name
# pylint: disable=missing-class-docstring
# pylint: disable=missing-function-docstring

import argparse
import configparser
import itertools
import logging
import os
import os.path
import random
import re
import sys
from collections import Counter
from dataclasses import dataclass, field
from functools import lru_cache, partial
from operator import attrgetter

cache  = lru_cache(maxsize=None)
ichain = itertools.chain.from_iterable


class Args:

    @classmethod
    def parse(cls, argv=None):
        if argv is None:
            argv = sys.argv

        parser = argparse.ArgumentParser(
            formatter_class=cls._ArgparseFormatter,
            description=__doc__)
        parser.add_argument(
            "src-dir",
            help="Directory from which upstream Mullvad .conf files are read.")
        parser.add_argument(
            "dst-dir",
            help="Directory to which output is written.  "
            "Without -f, it is an error if the directory exists.")
        parser.add_argument("-v", "--verbose", action="store_true")
        parser.add_argument("--dry-run", action="store_true", help=argparse.SUPPRESS)
        parser.add_argument(
            "-f", "--force", action="store_true",
            help="Proceed even if dst-dir is found to exist.  "
            "Any existing files in the destination directory are merged with new output.")
        parser.add_argument(
            "-n", type=int, default=10,
            help="Maximum number of configuration files written to dst-dir.  "
            "This limit is imposed last, after all --select-* filters.  "
            "Specify a non-positive value to disable this limit.")
        parser.add_argument(
            "--seed", type=int, default=0,
            help="Deterministic seed for the PRNG.  "
            "By default, every invocation produces a unique sample.")
        cc_group = parser.add_mutually_exclusive_group()
        cc_group.add_argument(
            "--select-country", dest="select_countries", type=cls._country_count,
            action="append", default=[], metavar="COUNTRY:COUNT",
            help="Select servers from a specific country.  "
            "Implicitly excludes servers from other countries.  "
            "May be supplied more than once:  "
            "a server is selected if its country of origin matches any COUNTRY.  "
            "COUNTRY is a Mullvad country code, usually an ISO 3166-1 alpha-2 code.  "
            "COUNT is a positive integer that specifies the maximum number of "
            "servers to select from that country.  e.g.: us:3")
        cc_group.add_argument(
            "--reject-country", dest="reject_countries", type=cls._country,
            action="append", default=[], metavar="COUNTRY",
            help="Reject all servers from a country.  "
            "May be supplied more than once.")
        parser.add_argument(
            "--prefer-city", dest="prefer_cities", type=cls._city,
            action="append", default=[], metavar="CITY",
            help="Assign a higher priority to a city when sampling.  "
            "Targets are more likely to be selected.  "
            "May be supplied more than once.  "
            "CITY is of form 'fra', 'hkg', 'sea', etc.  ")
        parser.add_argument(
            "--shun-city", dest="shun_cities", type=cls._city,
            action="append", default=[], metavar="CITY",
            help="Assign a lower priority to a city when sampling.  "
            "Targets are less likely to be selected.  "
            "May be supplied more than once.")
        parser.add_argument(
            "--reject-city", dest="reject_cities", type=cls._city,
            action="append", default=[], metavar="CITY",
            help="Reject a city.  Stronger than --shun-city.  "
            "May be supplied more than once.")
        parser.add_argument(
            "--prefer-server", dest="prefer_servers", type=cls._server_id,
            action="append", default=[], metavar="SERVERID",
            help="Assign a higher priority to a server when sampling.  "
            "Targets are more likely to be selected.  "
            "May be supplied more than once.  "
            "SERVERID is of form 'de-fra-wg-101'.  "
            "Leading zeroes in the ordinal index are permitted but are not significant.")
        parser.add_argument(
            "--shun-server", dest="shun_servers", type=cls._server_id,
            action="append", default=[], metavar="SERVERID",
            help="Assign a lower priority to a server when sampling.  "
            "Targets are less likely to be selected.  "
            "May be supplied more than once.")
        parser.add_argument(
            "--reject-server", dest="reject_servers", type=cls._server_id,
            action="append", default=[], metavar="SERVERID",
            help="Reject a server.  Stronger than --shun-server.  "
            "May be supplied more than once.")
        parser.add_argument(
            "--basename-prefix", default=DEFAULT_BASENAME_PREFIX,
            metavar="PREFIX",
            help="Common prefix for all generated file names.")
        parser.add_argument(
            "--rename", dest="renames", type=cls._server_id_name,
            action="append", default=[], metavar="SERVERID:NAME",
            help="Rename the configuration file for a given SERVERID.  "
            "May be supplied more than once, each flag with a different SERVERID.  "
            "SERVERID is as described above.  NAME is the desired file name.  "
            "NAME may be composed of any alpha-numeric character, "
            "the hyphen-minus (-), or the underscore (_).  "
            "NAME may not begin nor end with a hyphen-minus or an underscore.  "
            "PREFIX is implicitly prepended, and '.conf' implicitly appended, "
            "to form the complete name of the generated file.  ")
        parser.add_argument(
            "--cfg-address", metavar="ADDR",
            help="Override Interface.Address from the source WireGuard "
            "configuration with an alternative constant value.  "
            "Value should be a comma separated list of IP addresses with prefix length.")
        parser.add_argument(
            "--cfg-dns", metavar="DNSADDR",
            help="Override Interface.DNS from the source WireGuard "
            "configuration with an alternative constant value.  "
            "Value should be a comma separated list of IP addresses.")
        parser.add_argument(
            "--cfg-private-key", metavar="PRIVATEKEY",
            help="Override Interface.PrivateKey from the source WireGuard "
            "configuration with an alternative constant value.  "
            "Value should be a base64 encoded WireGuard private key.")
        args = parser.parse_args(argv[1:])

        select_countries_dupes = find_dupes([cc.country for cc in args.select_countries])
        if select_countries_dupes:
            parser.error(
                "--select-countries: duplicate countries: {}"
                .format(cjoin(sorted(select_countries_dupes))))

        city_prefer_shun_conflicts = set(args.prefer_cities) & set(args.shun_cities)
        if city_prefer_shun_conflicts:
            parser.error(
                "cities cannot be preferred and shunned simultaneously: {}"
                .format(cjoin(sorted(str(cid) for cid in city_prefer_shun_conflicts))))

        server_id_prefer_shun_conflicts = set(args.prefer_servers) & set(args.shun_servers)
        if server_id_prefer_shun_conflicts:
            parser.error(
                "server IDs cannot be preferred and shunned simultaneously: {}"
                .format(cjoin(sorted(str(sid) for sid in server_id_prefer_shun_conflicts))))

        renames_dupes = find_dupes([sidn.sid for sidn in args.renames])
        if renames_dupes:
            parser.error(
                "--rename: duplicate server IDs: {}"
                .format(cjoin(str(sid) for sid in sorted(renames_dupes))))

        return cls(args)

    def __init__(self, args):
        self._args = args

    def __getattr__(self, name):
        return getattr(self._args, name)

    @classmethod
    def _country(cls, s):
        return cls._parse_as_type(Country, s)

    @classmethod
    def _country_count(cls, s):
        return cls._parse_as_type(CountryCount, s)

    @classmethod
    def _city(cls, s):
        return cls._parse_as_type(City, s)

    @classmethod
    def _server_id(cls, s):
        return cls._parse_as_type(ServerID, s)

    @classmethod
    def _server_id_name(cls, s):
        return cls._parse_as_type(ServerIDName, s)

    @staticmethod
    def _parse_as_type(t, s):
        try:
            return t.parse(s)
        except (TypeError, ValueError) as exc:
            raise argparse.ArgumentTypeError(str(exc))

    class _ArgparseFormatter(argparse.RawDescriptionHelpFormatter,
                             argparse.ArgumentDefaultsHelpFormatter):
        pass


DEFAULT_BASENAME_PREFIX = "mlvd-"

# Higher numeric values are given preference.  Absolute values not significant.
PRIO_SHUN    = 1
PRIO_DEFAULT = 2
PRIO_PREFER  = 3

LOGGER = logging.getLogger(__name__)


class Error(Exception):
    pass


class Country(str):

    _RE = re.compile(r"(?P<country>[a-z]{2})", flags=re.ASCII)

    @classmethod
    def parse(cls, s):
        country, suffix = cls._split(s)
        if suffix:
            raise ValueError(f"invalid country code: superfluous suffix: {suffix!r}")
        return cls(country)

    @classmethod
    def parse_prefix(cls, s):
        country, suffix = cls._split(s)
        return cls(country), suffix

    @classmethod
    def _split(cls, s):
        m = cls._RE.match(s)
        if not m:
            raise ValueError(f"invalid country code: {s!r}")
        return m["country"].lower(), s[m.end(1):]


@dataclass(frozen=True)
class CountryCount:
    country: Country
    count:   int

    @classmethod
    def parse(cls, s):
        try:
            i = s.rindex(":")
        except ValueError as exc:
            raise ValueError(f"invalid country-count: {s!r}: {exc}") from None
        try:
            c = int(s[i+1:])
        except ValueError as exc:
            raise ValueError(f"invalid country-count: {s!r}: {exc}") from None
        return cls(country=Country.parse(s[:i]), count=c)


class City(str):

    _RE = re.compile(r"(?P<city>[a-z]{3})", flags=re.ASCII)

    @classmethod
    def parse(cls, s):
        city, suffix = cls._split(s)
        if suffix:
            raise ValueError(f"invalid city code: superfluous suffix: {suffix!r}")
        return cls(city)

    @classmethod
    def parse_prefix(cls, s):
        city, suffix = cls._split(s)
        return cls(city), suffix

    @classmethod
    def _split(cls, s):
        m = cls._RE.match(s)
        if not m:
            raise ValueError(f"invalid city code: {s!r}")
        return m["city"].lower(), s[m.end(1):]


@dataclass(frozen=True, order=True)
class ServerID:
    country: Country
    city:    City
    index:   int

    @classmethod
    def parse(cls, s):
        # s is of form 'de-fra-wg-304'

        country, suffix = Country.parse_prefix(s)
        city,    suffix = City.parse_prefix(suffix[1:])
        suffix = removeprefix(suffix, "-wg-")
        index  = int(suffix)

        return cls(country=country, city=city, index=index)

    def __str__(self):
        return f"{self.country}-{self.city}-{self._index_zfill}"

    @property
    def _index_zfill(self):
        return str(self.index).zfill(3)


@dataclass(frozen=True, order=True)
class ServerIDPrioritised:
    sid:      ServerID
    priority: int = field(default=PRIO_DEFAULT, compare=False)

    def __str__(self):
        return str(self.sid)

    def __getattr__(self, name):
        return getattr(self.sid, name)


@dataclass(frozen=True, order=True)
class ServerIDName:
    sid:  ServerID
    name: str

    _RE = re.compile(r"[a-z0-9](?:[_-]*[a-z0-9]+)*", flags=re.ASCII|re.I)

    @classmethod
    def parse(cls, s):
        try:
            i = s.rindex(":")
        except ValueError as exc:
            raise ValueError(f"invalid serverid-name: {s!r}: {exc}") from None
        name = s[i+1:]
        m = cls._RE.fullmatch(name)
        if not m:
            raise ValueError(f"invalid serverid-name: {s!r}")
        return cls(sid=ServerID.parse(s[:i]), name=name)


@dataclass(frozen=True)
class Configuration:
    path: str
    sid:  ServerID

    def basename(self, prefix=DEFAULT_BASENAME_PREFIX, suffix=None):
        if not suffix:
            suffix = str(self.sid)
        return f"{prefix}{suffix}.conf"

    def read(self):
        c = configparser.ConfigParser()
        c.optionxform = str
        c.read(self.path)
        return c


class PriorityCache:

    def __init__(self):
        self._by_country   = {}
        self._by_city      = {}
        self._by_server_id = {}

    def lookup(self, server_id):
        return next(p for p
                    in (self._by_server_id.get(server_id),
                        self._by_city.get(server_id.city),
                        self._by_country.get(server_id.country),
                        PRIO_DEFAULT)
                    if p)

    def shun_country(self, country):
        self._by_country[country] = PRIO_SHUN

    def prefer_country(self, country):
        self._by_country[country] = PRIO_PREFER

    def shun_city(self, city):
        self._by_city[city] = PRIO_SHUN

    def prefer_city(self, city):
        self._by_city[city] = PRIO_PREFER

    def shun_server_id(self, server_id):
        self._by_server_id[server_id] = PRIO_SHUN

    def prefer_server_id(self, server_id):
        self._by_server_id[server_id] = PRIO_PREFER


@dataclass
class TransformTemplate:
    basename_prefix: str = ""
    address:         str = ""
    dns_servers:     str = ""
    private_key:     str = ""

    def default(self):
        def transform(cfg):
            data = cfg.read()
            if self.address:
                dict_deep_set(data, ("Interface", "Address"), self.address)
            if self.dns_servers:
                dict_deep_set(data, ("Interface", "DNS"), self.dns_servers)
            if self.private_key:
                dict_deep_set(data, ("Interface", "PrivateKey"), self.private_key)
            return self._basename(cfg), data
        return transform

    def rename(self, new_name):
        def transform(cfg):
            inner_transform = self.default()
            _, data = inner_transform(cfg)
            return self._basename(cfg, suffix=new_name), data
        return transform

    def _basename(self, cfg, suffix=None):
        return cfg.basename(**{
            **({"prefix": self.basename_prefix} if self.basename_prefix else {}),
            **({"suffix": suffix} if suffix else {})})


TRANSFORMS = TransformTemplate()


def compose(initial, *funcs):
    v = initial
    for f in funcs:
        v = f(v)
    return v


def dict_deep_set(d, keys, value):
    *head, tail = keys
    for k in head:
        try:
            d = d[k]
        except KeyError:
            d[k] = {}
            d = d[k]
    d[tail] = value


def find_dupes(iterable):
    return [v for v, c in Counter(iterable).items() if c > 1]


def removeprefix(s, prefix):
    if s.startswith(prefix):
        return s[len(prefix):]
    return s


def removesuffix(s, suffix):
    if s.endswith(suffix):
        return s[:-len(suffix)]
    return s


def cjoin(iterable):
    return ", ".join(iterable)


def select_all(filters, iterable):
    return (v for v in iterable if all(f(v) for f in filters))


def group_all(groupers, iterable):
    l = list(iterable)
    for g in groupers:
        l = list(g(l))
    return l


def make_grouper(key, sampler):
    def grouper(iterable):
        for k, g in itertools.groupby(sorted(iterable, key=key), key=key):
            l = sampler(k, list(g))
            for v in l:
                yield v
    return grouper


def sample_by_priority(maxlen):
    key = attrgetter("priority")

    def sampler(unused_k, l):
        if len(l) <= maxlen:
            return l
        rem = maxlen
        sampled = []
        for _, g in itertools.groupby(sorted(l, key=key, reverse=True), key=key):
            l = list(g)
            if len(l) <= rem:
                sampled.extend(l)
                rem -= len(l)
                continue
            l = random.sample(l, k=rem)
            sampled.extend(l)
            break
        return sampled
    return sampler


def sample_by_country(countries):
    def sampler(country, l):
        if country not in countries:
            return []
        maxlen = countries[country]
        if len(l) <= maxlen:
            return l
        psampler = sample_by_priority(maxlen)
        return psampler(None, l)
    return sampler


def server_id_from_path(path):
    base = os.path.basename(path)
    if not base.endswith(".conf"):
        raise ValueError("file name missing .conf extension")

    name = compose(base[:-len(".conf")],
                   partial(removeprefix, prefix="mullvad-"),
                   partial(removesuffix, suffix="-wireguard"))
    return ServerID.parse(name)


def find_configuration(src_dir):
    for name in os.listdir(src_dir):
        src_path = os.path.join(src_dir, name)
        if not os.path.isfile(src_path):
            continue
        try:
            sid = server_id_from_path(src_path)
        except ValueError as exc:
            LOGGER.warning("%s: %s (skipped)", src_path, exc)
            continue
        yield Configuration(path=src_path, sid=sid)


def main(argv=None):

    # pylint: disable=too-many-branches
    # pylint: disable=too-many-locals
    # pylint: disable=too-many-statements

    args = Args.parse(argv)

    if args.verbose or args.dry_run:
        logging.getLogger().setLevel(logging.INFO)
    random.seed(args.seed if args.seed else None)

    filters    = []  # AND chain over ServerIDPrioritised values
    groupers   = []  #           over ServerIDPrioritised values
    transforms = {}  # sid -> transform, else TRANSFORMS.default

    @cache
    def transform(cfg):
        try:
            t = transforms[cfg.sid]
        except KeyError:
            t = TRANSFORMS.default()
        return t(cfg)

    if args.select_countries:
        select_countries = {cc.country for cc in args.select_countries}
        filters.append(lambda psid: psid.country in select_countries)
        groupers.append(make_grouper(
            lambda psid: psid.country,
            sample_by_country({cc.country: cc.count for cc in args.select_countries})))
    elif args.reject_countries:
        reject_countries = set(args.reject_countries)
        filters.append(lambda psid: psid.country not in reject_countries)
    if args.reject_servers:
        reject_servers = set(args.reject_servers)
        filters.append(lambda psid: psid not in reject_servers)
    if args.n > 0:
        groupers.append(make_grouper(
            lambda psid: 0,  # no-op sort/group key
            sample_by_priority(args.n)))
    TRANSFORMS.basename_prefix = args.basename_prefix
    if args.cfg_address:
        TRANSFORMS.address = args.cfg_address
    if args.cfg_dns:
        TRANSFORMS.dns_servers = args.cfg_dns
    if args.cfg_private_key:
        TRANSFORMS.private_key = args.cfg_private_key
    for rename in args.renames:
        transforms[rename.sid] = TRANSFORMS.rename(rename.name)

    prioc = PriorityCache()
    for cid in args.shun_cities:
        prioc.shun_city(cid)
    for cid in args.prefer_cities:
        prioc.prefer_city(cid)
    for sid in args.shun_servers:
        prioc.shun_server_id(sid)
    for sid in args.prefer_servers:
        prioc.prefer_server_id(sid)

    cfgs = {cfg.sid: cfg for cfg in find_configuration(getattr(args, "src-dir"))}

    psids = compose([ServerIDPrioritised(sid=sid, priority=prioc.lookup(sid))
                     for sid in cfgs.keys()],
                    partial(select_all, filters),
                    partial(group_all, groupers),
                    sorted)

    paths = []  # of (ServerID, path) tuples
    for psid in psids:
        path, _ = transform(cfgs[psid.sid])
        paths.append((psid.sid, path))
        LOGGER.info("emit %05s prio=%d -> %s",
                    str(psid), psid.priority,
                    os.path.join(getattr(args, "dst-dir"), path))

    # Each input ServerID should map to a unique output path.
    # Improper use of the --rename flag can violate this invariant.
    path_dupes = find_dupes(p for _, p in paths)
    if path_dupes:
        raise Error("would have clobbered destination paths: {} "
                    "(improper --rename?)"
                    .format(cjoin(sorted(path_dupes))))

    if args.dry_run:
        return

    try:
        os.mkdir(getattr(args, "dst-dir"))
    except FileExistsError:
        if not args.force:
            raise Error("refused to clobber existing destination directory: {} "
                        "(supply -f/--force to disregard)"
                        .format(getattr(args, "dst-dir"))) from None

    for psid in psids:
        basename, data = transform(cfgs[psid.sid])
        path = os.path.join(getattr(args, "dst-dir"), basename)
        with open(path, "w", encoding="utf8") as f:
            data.write(f)


if __name__ == "__main__":
    logging.basicConfig(format="%(message)s", level=logging.WARNING)
    try:
        sys.exit(main(sys.argv))
    except Error as ep_exc:
        print(ep_exc, file=sys.stderr)
        sys.exit(1)
